/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import dao.ConnectionProvider;
import forms.columns;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
//import static java.time.temporal.TemporalQueries.zoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utility.BDUtility;

/**
 *
 * @author jayaw
 */
public class ViewAttendance extends javax.swing.JFrame {

    private Long presentCount;
    

    /**
     * Creates new form ViewAttendance
     */
    public ViewAttendance() {
        initComponents();
        BDUtility.setImage(this, "images/abc1.jpg",1101, 501);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));
        
       
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCalendarPanel1 = new de.wannawork.jcalendar.JCalendarPanel();
        jCalendarPanel2 = new de.wannawork.jcalendar.JCalendarPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jCalendarComboBoxTo = new de.wannawork.jcalendar.JCalendarComboBox();
        jCalendarComboBoxFrom = new de.wannawork.jcalendar.JCalendarComboBox();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        absentLBL = new javax.swing.JLabel();
        presentLBL = new javax.swing.JLabel();
        lblAbsent = new javax.swing.JLabel();
        lblPresent = new javax.swing.JLabel();
        chechBoxContact = new javax.swing.JCheckBox();
        chechBoxAddress = new javax.swing.JCheckBox();
        chechBoxState = new javax.swing.JCheckBox();
        chechBoxCountry = new javax.swing.JCheckBox();
        chechBoxUniqueRegid = new javax.swing.JCheckBox();
        btnResetFilters = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("View Attendance");

        btnExit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel2.setText("From");

        jLabel3.setText("To");

        jLabel4.setText("Search");

        absentLBL.setText("Absent");

        presentLBL.setText("Present");

        lblAbsent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAbsent.setForeground(new java.awt.Color(255, 51, 51));
        lblAbsent.setText("-------");

        lblPresent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPresent.setText("-------");

        chechBoxContact.setText("Contact");

        chechBoxAddress.setText("Address");
        chechBoxAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chechBoxAddressActionPerformed(evt);
            }
        });

        chechBoxState.setText("State");
        chechBoxState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chechBoxStateActionPerformed(evt);
            }
        });

        chechBoxCountry.setText("Country");

        chechBoxUniqueRegid.setText("Unique Reg ID");

        btnResetFilters.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnResetFilters.setText("Reset Filters");
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(presentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(absentLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAbsent, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPresent, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(chechBoxContact, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chechBoxAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chechBoxState, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chechBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetFilters)
                    .addComponent(chechBoxUniqueRegid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(446, 446, 446)
                            .addComponent(btnExit))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCalendarComboBoxFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jCalendarComboBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCalendarComboBoxFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCalendarComboBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(presentLBL)
                            .addComponent(lblPresent))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(absentLBL)
                            .addComponent(lblAbsent))
                        .addGap(45, 45, 45)
                        .addComponent(chechBoxContact)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chechBoxAddress)
                        .addGap(18, 18, 18)
                        .addComponent(chechBoxState)
                        .addGap(18, 18, 18)
                        .addComponent(chechBoxCountry)
                        .addGap(18, 18, 18)
                        .addComponent(chechBoxUniqueRegid)
                        .addGap(45, 45, 45)
                        .addComponent(btnResetFilters)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void chechBoxAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chechBoxAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chechBoxAddressActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
       txtSearch.setText("");
       jCalendarComboBoxFrom.setDate( null);
       jCalendarComboBoxTo.setDate(null);
       chechBoxContact.setSelected(false);
       chechBoxAddress.setSelected(false);
       chechBoxState.setSelected(false);
       chechBoxCountry.setSelected(false);
       chechBoxUniqueRegid.setSelected(false);
       
       loadDataInTable();
       
        
    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private void chechBoxStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chechBoxStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chechBoxStateActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loadDataInTable();
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absentLBL;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JCheckBox chechBoxAddress;
    private javax.swing.JCheckBox chechBoxContact;
    private javax.swing.JCheckBox chechBoxCountry;
    private javax.swing.JCheckBox chechBoxState;
    private javax.swing.JCheckBox chechBoxUniqueRegid;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxFrom;
    private de.wannawork.jcalendar.JCalendarComboBox jCalendarComboBoxTo;
    private de.wannawork.jcalendar.JCalendarPanel jCalendarPanel1;
    private de.wannawork.jcalendar.JCalendarPanel jCalendarPanel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbsent;
    private javax.swing.JLabel lblPresent;
    private javax.swing.JLabel presentLBL;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

    private void loadDataInTable() {
        List<String> Columns = new ArrayList<>(Arrays.asList("ID", "Name", "Gender","Email", "CheckIn", "CheckOut", "Work Duration"));
        String searchText = txtSearch.getText().toString();
        Date fromDateFromCal = jCalendarComboBoxFrom.getDate();
        LocalDate fromDate = null;
        
        if (fromDateFromCal != null){
        fromDate = fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            
        //fromDate = fromDateFromCal.toInstant().atZone(ZoneId.SystemDefault()).toLocalDate();
        }
        Date toDateFromCal = jCalendarComboBoxTo.getDate();
        LocalDate toDate = null;
        if (toDateFromCal != null) {
            
              toDate = toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                //toDate = toDateFromCal.toInstant().atZone(ZoneId.SystemDefault()).toLocalDate();
        }
        
        Long daysBetween = null;
        if (fromDate != null && toDate !=null)  {
        daysBetween = countWeekdays(fromDate, toDate);
        }
        
        Boolean contactIncluded=chechBoxContact.isSelected();
        Boolean addressIncluded=chechBoxAddress.isSelected();
        Boolean stateIncluded=chechBoxState.isSelected();
        Boolean countryIncluded=chechBoxCountry.isSelected();
        Boolean uniqueIdIncluded=chechBoxUniqueRegid.isSelected();
        
        
        String sqlQuery = "SELECT from ud.id, ud.name, ud.gender, ud.email, ua.date, ua.checkin, ua.checkout, ua.work duration";
        if (contactIncluded) {
            columns.add("contact");
            sqlQuery += ", ud.contact";
        }
        if (addressIncluded) {
            columns.add("Address");
            sqlQuery += ", ud.address";
        }
        if (stateIncluded) {
            columns.add("State");
            sqlQuery += ",ud.state";
        }
        if (countryIncluded) {
            columns.add("Country");
            sqlQuery += ",ud.country";
        }
        if (uniqueIdIncluded) {
            columns.add("Unique REg Id");
            sqlQuery += ",ud.uniqueregid";
        }
        sqlQuery += "FROM userdeatils AS ud INNER JOIN userattendance AS ua ON ud.id=ua.userid";
        if (searchText != null) {
            sqlQuery += " WHERE (ud.name LIKE '%" + searchText + "%' OR ud.email LIKE '%" + searchText + "%')";
            //sqlQuery += "where (ud.name like '%" + searchText + "%' or ud.email like '%" + searchTeext + "%')";
            if (fromDate != null && toDate != null) {
               // sqlQuery += "AND ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
              sqlQuery += " AND ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";        
            } else if (fromDate != null) {
                sqlQuery += "and ua.date = '" + fromDate + "'";
            }
        }
        else {
            if (fromDate != null && toDate != null) {
                sqlQuery += "Where ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
            } 
            else if (fromDate != null) {
                sqlQuery += "Where ua.date = '" + fromDate + "'";
            }
            
            // Initialize the table model and set column identifiers before adding rows
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columns.toArray());
            userTable.setModel(model);

            
            try {
                Connection con = ConnectionProvider.getCon();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sqlQuery);
                Long presentCount = 0l;
                Long absentCount = 0l;
                Set<String> emailList = new HashSet<>();
                while (rs.next()) {
                     List<Object> row = new ArrayList<>();
                    row.add(rs.getString("id"));
                    row.add(rs.getString("name"));
                    row.add(rs.getString("gender"));
                    row.add(rs.getString("email"));
                    emailList.add(rs.getString("email"));
                    row.add(rs.getString("date"));
                    row.add(rs.getString("checkin"));
                    row.add(rs.getString("checkout"));
                    row.add(rs.getString("workduration"));
                    if (contactIncluded) {
                        row.add(rs.getString("contact"));
                    }
                    if (addressIncluded) {
                        row.add(rs.getString("address"));
                    }
                    if (stateIncluded) {
                        row.add(rs.getString("state"));
                    }
                    if (countryIncluded) {
                        row.add(rs.getString("country"));
                    }
                    if (uniqueIdIncluded) {
                        row.add(rs.getString("uniqueregid"));
                    }
                    if (rs.getString("checkout") == null) {
                        absentCount++;

                    } else {
                        presentCount++;
                    }
                    model.addRow(row.toArray());
                }

                if (emailList.size() == 1) {
                    lblPresent.setVisible(true);
                    lblAbsent.setVisible(true);
                    presentLBL.setVisible(true);
                    absentLBL.setVisible(true);
                    lblPresent.setText(presentCount.toString());
                    if (daysBetween != null && daysBetween > 0) {
                        absentCount = daysBetween - presentCount;

                    }
                    lblAbsent.setText(absentCount.toString());
                } else {
                    lblPresent.setVisible(false);
                    lblAbsent.setVisible(false);
                    presentLBL.setVisible(false);
                    absentLBL.setVisible(false);
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "something went wrong.");
               }
        
        
    }

    
    }

    private Long countWeekdays(LocalDate fromDate, LocalDate toDate) {
        long count = 0;
        LocalDate date = fromDate;
        while (date.isBefore(toDate) || date.equals(toDate)) {
         if (!(date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY)) {
              count++;
            }
            date = date.plusDays(1);
        }
       return count;
    }
}

