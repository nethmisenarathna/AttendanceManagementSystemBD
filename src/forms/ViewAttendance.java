/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import java.awt.Color;
import javax.swing.BorderFactory;
import utility.BDUtility;
import dao.ConnectionProvider;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import java.sql.*;

/**
 *
 * @author jayaw
 */
public class ViewAttendance extends javax.swing.JFrame {

    /**
     * Creates new form ViewAttendance
     */
    public ViewAttendance() {
        initComponents();
        BDUtility.setImage(this, "images/abc1.jpg", 1101, 501);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));

        //dateChooserFrom.setDateFormat("yyyy-MM-dd");
        //dateChooserTo.setDateFormat("yyyy-MM-dd");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        checkboxContact = new java.awt.Checkbox();
        checkboxRegID = new java.awt.Checkbox();
        checkboxCountry = new java.awt.Checkbox();
        checkboxState = new java.awt.Checkbox();
        checkboxAddress = new java.awt.Checkbox();
        jLabel1 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        presentLBL = new javax.swing.JLabel();
        absentLBL = new javax.swing.JLabel();
        lblPresent = new javax.swing.JLabel();
        lblAbsent = new javax.swing.JLabel();
        btnResetFilters = new javax.swing.JButton();
        jCheckBoxContact = new javax.swing.JCheckBox();
        jCheckBoxAdreess = new javax.swing.JCheckBox();
        jCheckBoxState = new javax.swing.JCheckBox();
        jCheckBoxCountry = new javax.swing.JCheckBox();
        jCheckBoxRegID = new javax.swing.JCheckBox();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        checkboxContact.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        checkboxContact.setLabel("Contact");

        checkboxRegID.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        checkboxRegID.setLabel("Reg ID");

        checkboxCountry.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        checkboxCountry.setLabel("Country");

        checkboxState.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        checkboxState.setLabel("State");

        checkboxAddress.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        checkboxAddress.setLabel("Address");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1101, 501));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("View Attendance");

        btnExit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        txtSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Search");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("TO");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("From");

        presentLBL.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        presentLBL.setText("Present:");

        absentLBL.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        absentLBL.setText("Absent:");

        lblPresent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPresent.setForeground(new java.awt.Color(51, 255, 51));
        lblPresent.setText("---------");

        lblAbsent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAbsent.setForeground(new java.awt.Color(255, 51, 51));
        lblAbsent.setText("---------");

        btnResetFilters.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnResetFilters.setText("Reset Filtres");
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        jCheckBoxContact.setText("Contact");

        jCheckBoxAdreess.setText("Address");

        jCheckBoxState.setText("State");

        jCheckBoxCountry.setText("Country");

        jCheckBoxRegID.setText("Reg ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnResetFilters)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(absentLBL)
                                    .addComponent(presentLBL))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblPresent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblAbsent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jCheckBoxAdreess, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxContact, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxState, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxRegID, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(434, 434, 434)
                            .addComponent(btnExit))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(206, 206, 206)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(257, 257, 257)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(presentLBL)
                            .addComponent(lblPresent))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absentLBL)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblAbsent, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jCheckBoxContact)
                        .addGap(29, 29, 29)
                        .addComponent(jCheckBoxAdreess)
                        .addGap(26, 26, 26)
                        .addComponent(jCheckBoxState)
                        .addGap(27, 27, 27)
                        .addComponent(jCheckBoxCountry)
                        .addGap(27, 27, 27)
                        .addComponent(jCheckBoxRegID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResetFilters))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
        txtSearch.setText("");
        dateChooserFrom.setDate(null);
        dateChooserTo.setDate(null);
        jCheckBoxContact.setSelected(false);
        jCheckBoxAdreess.setSelected(false);
        jCheckBoxState.setSelected(false);
        jCheckBoxCountry.setSelected(false);
        jCheckBoxRegID.setSelected(false);

        loadDataInTable();

    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loadDataInTable();
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absentLBL;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnResetFilters;
    private java.awt.Checkbox checkboxAddress;
    private java.awt.Checkbox checkboxContact;
    private java.awt.Checkbox checkboxCountry;
    private java.awt.Checkbox checkboxRegID;
    private java.awt.Checkbox checkboxState;
    private javax.swing.JCheckBox jCheckBoxAdreess;
    private javax.swing.JCheckBox jCheckBoxContact;
    private javax.swing.JCheckBox jCheckBoxCountry;
    private javax.swing.JCheckBox jCheckBoxRegID;
    private javax.swing.JCheckBox jCheckBoxState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbsent;
    private javax.swing.JLabel lblPresent;
    private javax.swing.JLabel presentLBL;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

    private void loadDataInTable() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        List<String> Colums = new ArrayList<>(Arrays.asList("ID", "Name", "Email", "CheckIn", "CheckOut", "Work Duration"));
        String searchText = txtSearch.getText().toString();
        Date fromDateFromCal = dateChooserFrom.getDate();
        LocalDate fromDate = null;
        if (fromDate  {
            FromCal != null
        }
        
            ){
        fromdate = fromDateFromcal.toInstant().atZone(ZoneId, SystemDefault()).toLocalDate();
        }
        Date toDateFromCal = dateChooserTo.getDate();
        LocalDate toDate = null;
        if (toDateFromCal != null) {
            toDate = toDateFromCal.toInstant().atZone(zoneId.SystemDEfault()).toLocalDate();
        }

        Long daysBetween = null;
        if (fromDate != null && toDate  {
            1 = null
        }
        
            ){
        daysBetween = countWeekdays(fromDate, toDate);
        }
        Boolean contactIncluded = jCheckBoxContact.issSelected();
        Boolean addressInclude = jCheckBoxAdreess.isSelected();
        Boolean sateIncluded = jCheckBoxState.issSelected();
        Boolean countryIncluded = jCheckBoxCountry.issSelected();
        Boolean uniqueRegIdIncluded = jCheckBoxRegID.issSelected();

        String sqlQuery = "SELECT ud.id,ud.name,ud.gender, ud.email,ua.date,ua.chechin,ua.chechout,ua.workduration";
        if (contactIncluded) {
            columns.add("contact");
            sqlQuery += ",ud.ontact";
        }
        if (addressIncluded) {
            columns.add("Address");
            sqlQuery += ",ud.address";
        }
        if (stateIncluded) {
            columns.add("State");
            sqlQuery += ",ud.state";
        }
        if (countryIncluded) {
            columns.add("Country");
            sqlQuery += ",ud.country";
        }
        if (uniqueRegIdIncluded) {
            columns.add("Unique REg Id");
            sqlQuery += ",ud.uniqueregid";
        }

        sqlQuery += "FROM userdeatils AS ud INNER JOIN userattendance AS ua ON ud.id=ua.userid";
        if (searchText != null) {
            sql += "where (ud.name like '%" + searchText + "%' or ud.email like '%" + searchTeext + "%')";
            if (fromDate != null && toDate != null) {
                sqlQuery += "AND ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";

            } else if (fromDate != null) {
                sqlQuery += "and ua.date = '" + fromDate + "'";
            }
        } else {
            if (fromDate != null && toDate != null) {
                sqlQuery += "Where ua.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
            } else if (fromDate != null) {
                sqlQuery += "Where ua.date = '" + fromDate + "'";
            }

            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columns.toArray());
            userTable.setModel(model);

            try {
                Connection con = ConnectionProvider.getCon();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sqlQuery);
                Long presenCount = 01;
                Long absentCount = 01;
                Set<String> emailList = new Hashset<>();
                while (rs.next()) {
                    List<Object> row = new ArrayList<>;
                    row.add(rs.getString("id"));
                    row.add(rs.getString("name"));
                    row.add(rs.getString("gender"));
                    row.add(rs.getString("email"));
                    emailList.add(rs.getString("email"));
                    row.add(rs.getString("date"));
                    row.add(rs.getString("checkin"));
                    row.add(rs.getString("checkout"));
                    row.add(rs.getString("wirkduration"));
                    if (contactIncluded) {
                        row.add(rs.getString("contact"));
                    }
                    if (addressIncluded) {
                        row.add(rs.getString("address"));
                    }
                    if (stateIncluded) {
                        row.add(rs.getString("state"));
                    }
                    if (countryIncluded) {
                        row.add(rs.getString("country"));
                    }
                    if (uniqueRegIdIncluded) {
                        row.add(rs.getString("uniqueregid"));
                    }
                    if (rs.getString("checkout") == null) {
                        absentCoumt++;

                    } else {
                        presentCount++;
                    }
                    model.addrow(row.toArray());
                }

                if (emailList.size() == 1) {
                    lblPresent.setVisible(true);
                    lblAbsent.setVisible(true);
                    presentLBL.setVisible(true);
                    absentLBL.setVisible(true);
                    lblPresent.setText(prsentCount.toString());
                    if (daysBetween != null && daysBetween > 0) {
                        absentCount = daysBetween - presentCout;

                    }
                    lblAbsent.setText(absentCount.toString);
                } else {
                    blPresent.setVisible(false);
                    lblAbsent.setVisible(false);
                    presentLBL.setVisible(false);
                    absentLBL.setVisible(false);
                }

            } catch (Exception ex) {
                JOptionOane.showMessageDialog
            
        , "something went wrong.");
               }
        
        
        
    }
    
    

    private Long countWeekdays(LocalDate start, LocalDate end) {
        long count = 0;
        LocalDate date = start;
        while (date.isBefore(end) || date.equals(end)) {
            if (!(date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY)) {
                count++;
            }
            date = date.plusDays(1);
        }
        return count;
    }

}
